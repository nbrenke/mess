
# Generated by Selenium IDE
#import pytest
from asyncio.subprocess import Process
from asyncio.windows_events import NULL
from genericpath import exists
from logging import exception
import logging
import os
import glob
import platform
import math
import time
import json
import base64
import pyperclip
from io import BytesIO
from PIL import Image
from enum import Enum
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager


from selenium import common as seleniumCommon
import pytest
import pytest_html


#Import strings
dashboardPanelXPATHLocator = "(//div[@data-test-subj='dashboardPanel'"  #Don't close the ])

def printl(str):
    print(str)
    global logger
    logger.info(str)
    time.sleep(.01)
def printlwarning(str):
    print(str)
    global logger
    logger.warning(str)
    time.sleep(.01)
def printlerror(str):
    print(str)
    global logger
    logger.error(str)
    time.sleep(.01)

class DriverAction(Enum):
    CLICK = 1
    SEND_KEYS = 2
    CLEAR = 3
    SCREENSHOT_ELEMENT = 4
    GET_TEXT = 5
    WAIT = 6
    SELECT = 7
    VERIFY_EXISTS = 8
    VERIFY_EXISTS_INSTANT = 9
    RETURN_ATTRIBUTE = 10
    HIDE = 11
    UNHIDE = 12
    HOVER = 13
    SCROLL = 14
    SCREENSHOT_RAW = 15



class DriverSelectorType(Enum):
    XPATH = 1
    LINK_TEXT = 2
    CLASS = 3
    SELECTOR = 4
    NAME = 5

class KibanaShortcuts():
    #After having loaded the kibana url, call this to login
    @staticmethod
    def Login(instance, kibanaUser, kibanaPass):
         #Login actions                                                                                  
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Log in with Elasticsearch'"], xpathParentSelection="/../../..")
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.NAME, driverSelectorInputs=["username"], actionPassValue=kibanaUser)
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.NAME, driverSelectorInputs=["password"], actionPassValue=kibanaPass)
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Log in'"], xpathParentSelection='/ancestor::button[1]')
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Acknowledge and continue'"], xpathParentSelection="/ancestor::button[1]")

    @staticmethod
    def Login_Select_Space(instance, dashboardName):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.LINK_TEXT, driverSelectorInputs=[dashboardName])
        time.sleep(2)

                
    @staticmethod
    def Screenshot_Page(instance, screenshotName):
        time.sleep(2)
        logger = logging.getLogger("AutomatedTesting")
        imgData = AST.Access_Element(instance, DriverAction.SCREENSHOT_RAW, DriverSelectorType.XPATH, actionPassValue = screenshotName, driverSelectorInputs=["//body[@class"])
        logger.info(screenshotName, attachment={"name" : screenshotName, "data" : imgData, "mime" : "image/png"} )
       
    @staticmethod
    def Read_Clipboard():
        time.sleep(.25)
        return pyperclip.paste()
        
    @staticmethod
    def Dashboard_Download_Panel_CSV(instance, driverSelectorInputs, xpathParentSelection):
        AST.Access_Element(instance, DriverAction.SCROLL, DriverSelectorType.XPATH, actionPassValue="50", driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection) #scroll to panel panel options
        time.sleep(.25)
        AST.Access_Element(instance, DriverAction.HOVER, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection)
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection+"//*[contains(@aria-label, \"Panel options\")]") #click panel options
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@data-test-subj=\"embeddablePanelAction-openInspector\""])
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//span[contains(text(),\"Download CSV\")"], xpathParentSelection="/ancestor::button")
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//span[contains(text(),\"Formatted CSV\")"], xpathParentSelection="/ancestor::button")
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Close Inspector'"])
        time.sleep(5)
        #downloaded, need to open and add to report portal
        
        
        
    @staticmethod
    def Dashboard_Return_TooltipHeader(instance):
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["contains(@id, 'echTooltipPortalMainTooltip')"]) == True):
            return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["contains(@id, 'echTooltipPortalMainTooltip')"])
        else:
            if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["@class='visTooltip'"]) == True):
                return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["@class='visTooltip'"])
            else:
                return None
            
    @staticmethod
    def Dashboard_Return_PanelInfoText(instance, driverSelectorInputs, xpathParentSelection = ""):
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection+'/div/div/figcaption/h2/span/span/*[@xmlns]')):
            #AST.Access_Element(instance, DriverAction.SCROLL, DriverSelectorType.XPATH, actionPassValue="750", driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection+'/div/div/figcaption/h2/span/span/*[@xmlns]')
            AST.Access_Element(instance, DriverAction.HOVER, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection+'/div/div/figcaption/h2/span/span/*[@xmlns]')
            return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["//div[@data-euiportal='true'"], xpathParentSelection="[2]")
        #//div[@data-euiportal='true']/*
        else:
            print("No panel info hover-element found")
            return None
    
    @staticmethod 
    def Dashboard_Directive_Click(instance, directiveName):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=[f"//a[text()='{directiveName}'"])
        
    
    @staticmethod
    def Dashboard_Return_Panel_XPATH_By_Name(instance, panelName):
        iCount = 0
        iCountElsePanels = 0
        elements = instance.driver.find_elements(By.XPATH, dashboardPanelXPATHLocator + "])")
        for panel in elements:
            iCount += 1
            tmpTitle = ""
            if AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=[dashboardPanelXPATHLocator], xpathParentSelection = ")[" + str(iCount) + "]/div/div/figcaption/h2/span/span/span") == True:
                tmpTitle = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=[dashboardPanelXPATHLocator], xpathParentSelection = ")[" + str(iCount) + "]/div/div/figcaption/h2/span/span/span")
                #print("txt=" + tmpTitle)
            #print(tmpTitle)
            if panelName == tmpTitle: #If same panel, validate and end
                #print(dashboardPanelXPATHLocator + ")[" + str(iCount) + "]")
                return [dashboardPanelXPATHLocator, ")[" + str(iCount) + "]"]
            else:
                pass
        return None
        
                
    @staticmethod
    def Dashboard_Return_Panel_XPATH_By_Number(instance, panelNumber):
        elements = instance.driver.find_elements(By.XPATH, dashboardPanelXPATHLocator + "])")
        if (len(elements) >= panelNumber): #If panel exists at number index given on page
            return [dashboardPanelXPATHLocator, ")[" + str(panelNumber+1) + "]"]
        return None
                
    @staticmethod
    def Dashboard_Input_To_Search(instance, input, customKeys = [Keys.ENTER], clickInput = False, trashtest = False):
        time.sleep(.2)
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"])
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"])
        time.sleep(.5)
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"], actionPassValue = input)
        time.sleep(.2)
        if clickInput:
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"])
        time.sleep(3)
        for key in customKeys:
            time.sleep(.25)
            AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"], actionPassValue = key)
        #Deselect by clicking background element
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the dashboard page'"], actionPassValue = [Keys.TAB, Keys.TAB])
        time.sleep(5) #Let's dashboard update

    @staticmethod
    def Dashboard_Set_Calendar_Last_72_Hr(instance):
        Dashboard_Set_Calendar_Date(instance, 72, "Hours")

    @staticmethod
    def Dashboard_Set_Calendar_Last_30_Day(instance):
        Dashboard_Set_Calendar_Date(instance, 30, "Days")
        
    staticmethod
    def Dashboard_Set_Calendar_Date(instance, amount, unit):
        try:
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Date quick select'"])
            AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Time value'"])
            time.sleep(.1)
            AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Time value'"], actionPassValue = str(amount))
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//select[@aria-label='Time unit'"])
            AST.Access_Element(instance, DriverAction.SELECT, DriverSelectorType.XPATH, driverSelectorInputs=["//select[@aria-label='Time unit'"], actionPassValue= unit)
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//span[text()='Apply'"], xpathParentSelection="/ancestor::button[1]")
        except:
            time.sleep(1)
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Date quick select'"])
            time.sleep(.2)
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Date quick select'"])
            AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Time value'"])
            time.sleep(.1)
            AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Time value'"], actionPassValue = str(amount))
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//select[@aria-label='Time unit'"])
            AST.Access_Element(instance, DriverAction.SELECT, DriverSelectorType.XPATH, driverSelectorInputs=["//select[@aria-label='Time unit'"], actionPassValue= unit)
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//span[text()='Apply'"], xpathParentSelection="/ancestor::button[1]")

    @staticmethod   # THIS METHOD IS OUT-DATED AND WILL NOT WORK AS IS
    def Dashboard_Return_Panel_Value(instance, listElementXpath, xpathParentSelection = ""):
        #If non-empty Table
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/table")):
            #print("Non-Empty Table")
            iColumns = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/table/thead/tr/th"))
            tmpTable = []
            #Headers
            tmpList = []
            for column in iColumns:
                tmpList.append(column.text)
            tmpTable.append(tmpList)
            #Per Row
            iRows = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/table/tbody/tr"))
            for row in iRows:
                tmpList = []
                iValues = row.find_elements(By.TAG_NAME, "td")
                for value in iValues:
                    tmpList.append(value.text)
                tmpTable.append(tmpList)
            return tmpTable

        #Div Graph (HORRIBLE)
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/div/div/div/div/div/div/button")):
            iColumns = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/div/div/div[1]/div"))
            numIColumns = len(iColumns)
            tmpTable = []
            #Headers
            tmpList = []
            for column in iColumns:
                tmpList.append(column.text)
            tmpTable.append(tmpList)
            #Rows. Do not use first
            iRows = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/div/div/div"))
            #For each 'row'
            for x in range(math.floor((len(iRows) - 1) / numIColumns)):
                tmpList = []
                for y in range(numIColumns):
                    #Add 1 to skip first
                    tmpList.append(iRows[(x*numIColumns) + y + 1].text)
                tmpTable.append(tmpList)
            return tmpTable

        #Panel Type B
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/div/span")):
            return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/div/span")
        #Graph Type: History Graph
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/figure")):
            AST.Access_Element(instance, DriverAction.HOVER, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div/div/figure/canvas", actionPassValue=[0, 0] )
            tmpValue = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div[4]/div/ul/li/div[4]")
            if tmpValue == "0":
                return "-"
            tmpValue = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/div[4]/div/ul")
            return tmpValue
        #Graph Type: Piechart
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/div/figure")):
            return "Data exists but data cannot be extracted. Verify Manually"

        #Graph Type: Bargraph + Multi-values over time
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div/figure")):
            return "Data exists but data cannot be extracted. Verify Manually"

        #Graph Type: Multi Bargraph
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/canvas")):
            return "Data exists but data cannot be extracted. Verify Manually"
            
        #Graph Type: simple bar graph ex. hardware assets
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/figure")):
            return "Data exists but data cannot be extracted. Verify Manually"
        
        #No panel value [Tables]
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH,driverSelectorInputs =  listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/span/div/div")):
            return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/span/div/div")

        #Graph Heatmap
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div") and AST.Access_Element(instance, DriverAction.RETURN_ATTRIBUTE, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div/div/div", actionPassValue= 'data-vislib-chart-type') == 'heatmap' ):
            return "Data exists but data cannot be extracted. Verify Manually"


        #Panel Type A
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div")):
            return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/div/div")

        #Div List (Also awful)
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/div/span/div[3]")):
            iColumns = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/span/div[3]/div/div[2]/div/div/div/div/div/div[1]/div"))
            numIColumns = len(iColumns)
            tmpTable = []
            #Headers
            tmpList = []
            for column in iColumns:
                tmpList.append(column.text)
            tmpTable.append(tmpList)
            #Rows. Do not use first
            iRows = instance.driver.find_elements(By.XPATH, AST.Utility_ReturnXpathFromInput(listElementXpath, xpathParentSelection = xpathParentSelection + "/div/span/div[3]/div/div[2]/div/div/div/div/div/div"))
            #For each 'row'
            for x in range(math.floor((len(iRows) - 1) / numIColumns)):
                tmpList = []
                for y in range(numIColumns):
                    #Add 1 to skip first
                    tmpList.append(iRows[(x*numIColumns) + y + 1].text)
                tmpTable.append(tmpList)
            return tmpTable
    
    @staticmethod   # THIS METHOD IS OUT-DATED AND WILL NOT WORK AS IS
    def Dashboard_Validate_Panel_By_Xpath(instance, listElementXpath, screenshot=False, elementNameForLog="Unspecified Panel", xpathParentSelection = ""):
        actionPassValueScreenshot = ["C:\\Selenium\\Reports\\Screenshots\\" + elementNameForLog + ".png"]
        value = KibanaShortcuts.Dashboard_Return_Panel_Value(instance, listElementXpath, xpathParentSelection)
        #If is a table
        if (type(value) == type([])):
            table = value
            #Go through each row
            tmp_hasData = False
            tmp_emptyData = False
            for i in range(len(table)):
                #Skip header
                if i == 0:
                    continue
                for k in range(len(table[i])):
                    if AST.Utility_ReturnIsNullPanelValue(table[i][k]):
                        tmp_emptyData = True
                    else:
                        tmp_hasData = True
            #Print table validation
            if (tmp_hasData and tmp_emptyData):
                print("Panel [" + elementNameForLog + "] has data present in the table but is missing some data")
                instance.PanelData_IsInvalid = True
                instance.PanelData_ListInvalid.append(elementNameForLog)
            if (not tmp_hasData and tmp_emptyData):
                print("Panel [" + elementNameForLog + "] is empty or has no data in the table")
                instance.PanelData_IsInvalid = True
                instance.PanelData_ListInvalid.append(elementNameForLog)
            if (tmp_hasData and not tmp_emptyData):
                print("Panel [" + elementNameForLog + "] has data present in the table")
            #Print Table
            AST.Table_PrintTableValues(table)
        #If empty panel
        elif (AST.Utility_ReturnIsNullPanelValue(value)):
            print("Panel [" + elementNameForLog + "] is empty or contains no data")
            instance.PanelData_IsInvalid = True
            instance.PanelData_ListInvalid.append(elementNameForLog)
        #if single-Value panel
        else:
            print("Panel [" + elementNameForLog + "] value: " + value)

        #Error manual validation
        if (value == "Data exists but data cannot be extracted. Verify Manually"):
            instance.PanelData_IsRequireValidation = True
            instance.PanelData_ListRequireValidation.append(elementNameForLog)
            actionPassValueScreenshot.append("RequireValidation")

        if screenshot:
            if (AST.Access_Element(instance, DriverAction.RETURN_ATTRIBUTE, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/../.." , actionPassValue="data-test-subj") == "embeddablePanel" ):
                AST.Access_Element(instance, DriverAction.SCREENSHOT_ELEMENT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/../.." , actionPassValue = actionPassValueScreenshot)
            elif (AST.Access_Element(instance, DriverAction.RETURN_ATTRIBUTE, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/../../../../.." , actionPassValue="data-test-subj") == "embeddablePanel" ):
                AST.Access_Element(instance, DriverAction.SCREENSHOT_ELEMENT, DriverSelectorType.XPATH, driverSelectorInputs = listElementXpath, xpathParentSelection = xpathParentSelection + "/../../../../.." , actionPassValue = actionPassValueScreenshot)
            
            
            


        #Add divider for next line
        print("")

    @staticmethod # THIS METHOD IS OUT-DATED AND WILL NOT WORK AS IS
    def Dashboard_Validate_Panel_By_Name(instance, panelName, screenshotPanel=False, elementNameForLog="Unspecified Panel"):
        iCount = 0
        iCountElsePanels = 0
        elements = instance.driver.find_elements(By.XPATH, "(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'])")
        for panel in elements:
            iCount += 1
            tmpTitle = ""
            if AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'"], xpathParentSelection = ")[" + str(iCount) + "]/../../span") == True:
                tmpTitle = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'"], xpathParentSelection = ")[" + str(iCount) + "]/../../span")
            else:
                if AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'"], xpathParentSelection = ")[" + str(iCount) + "]/../../../../../span") == True:
                    tmpTitle = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'"], xpathParentSelection = ")[" + str(iCount) + "]/../../../../../span")
            if tmpTitle != None and tmpTitle != "":
                pass #Name is proper
            else:
                #Get name of secondary elemeents
                nameElement = panel.find_elements(By.XPATH, "//span[@class = '' and text() != '' and not(contains(text(), '.'))] | //div[text() != '' and not(contains(text(), '.')) and @class ='tvbVisMetric__label--primary']  | //div[@class='mtrVis__container']/div[2]")
                tmpTitle = nameElement[iCountElsePanels].text
                iCountElsePanels += 1 #Used to track for find elements below since xpath searches entire page
            if panelName == tmpTitle: #If same panel, validate and end
                if elementNameForLog == "Unspecified Panel":
                    elementNameForLog = tmpTitle
                KibanaShortcuts.Dashboard_Validate_Panel_By_Xpath(instance, ["(//div[@data-test-subj='visualizationLoader' and@data-description != ''] | //div[@data-test-subj='lnsVisualizationContainer' and @data-description != ''] | //div[@class = 'euiFlexGroup euiFlexGroup--gutterExtraSmall euiFlexGroup--directionColumn'"], xpathParentSelection = ")[" + str(iCount) + "]", screenshot=screenshotPanel, elementNameForLog=elementNameForLog)
                return

    @staticmethod # THIS METHOD IS OUT-DATED AND WILL NOT WORK AS IS
    def Dashboard_Validate_All_Panels(instance):
        global logger
        logger = logging.getLogger("AutomatedTesting")
        i = 0
        all_valid = True
        while True:
            panel_exists = AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs=["(//div[@data-test-subj='dashboardPanel'"], xpathParentSelection=")[" + str(i + 1) + "]")
            if (panel_exists == True):
                panel = KibanaShortcuts.Dashboard_Return_Panel_XPATH_By_Number(instance, i) 
                result = KibanaShortcuts.Dashboard_Validate_Panel(instance, driverSelectorInputs=[panel[0]], xpathParentSelection=panel[1])
                printl("    Result: Panel " + str(i) + " Valid: " + str(result))   
                if (result == False):
                    all_valid = False       
                                        
                #print(AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=[panel[0]], xpathParentSelection=panel[1]))      
            else: 
                return all_valid
            i += 1
        
    @staticmethod 
    def Dashboard_Validate_Panel(instance, driverSelectorInputs, xpathParentSelection):
        text = AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection)
        error = AST.Access_Element(instance, DriverAction.VERIFY_EXISTS_INSTANT, DriverSelectorType.XPATH, driverSelectorInputs=driverSelectorInputs, xpathParentSelection=xpathParentSelection + "//*[descendant::*[@data-test-subj='visualization-error-text']]")
        if (text != None and error == False):
            return True
        else:
            return False
    
    @staticmethod   
    def Dashboard_Hide_Bottom_Bar(instance):
        AST.Access_Element(instance, DriverAction.HIDE, DriverSelectorType.XPATH, driverSelectorInputs=["//a[contains(@href, '#/dashboard')"], xpathParentSelection="/parent::li/parent::ul/../../../../../../../../../../../../parent::div")
        AST.Access_Element(instance, DriverAction.HIDE, DriverSelectorType.XPATH, driverSelectorInputs=["//em[contains(text(), 'Dashboard')"], xpathParentSelection="/parent::li/parent::ul")
        AST.Access_Element(instance, DriverAction.HIDE, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Additional Resources'"], xpathParentSelection="/../../../..")


    @staticmethod   
    def Dashboard_Unhide_Bottom_Bar(instance):
        AST.Access_Element(instance, DriverAction.UNHIDE, DriverSelectorType.XPATH, driverSelectorInputs=["//a[contains(@href, '#/dashboard')"], xpathParentSelection="/parent::li/parent::ul/../../../../../../../../../../../../parent::div")
        AST.Access_Element(instance, DriverAction.UNHIDE, DriverSelectorType.XPATH, driverSelectorInputs=["//em[contains(text(), 'Dashboard')"], xpathParentSelection="/parent::li/parent::ul")
        AST.Access_Element(instance, DriverAction.UNHIDE, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Additional Resources'"], xpathParentSelection="/../../../..")

    #Discover

    @staticmethod
    def Navigate_Discover(instance):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Toggle primary navigation'"])
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='Discover'", "@class='euiListGroupItem__label'"], xpathParentSelection="/parent::a")

    @staticmethod
    def Navigate_Dashboard(instance, dashboardName):
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["text()='" + dashboardName + "'"], xpathParentSelection="/parent::a") == True):
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='" + dashboardName + "'"], xpathParentSelection="/parent::a")
            time.sleep(2)
            return;
        time.sleep(2) #repeat just in case
        if (AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["text()='" + dashboardName + "'"], xpathParentSelection="/parent::a") == True):
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["text()='" + dashboardName + "'"], xpathParentSelection="/parent::a")
            time.sleep(2)
            return;
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@title='Dashboard'", "@data-test-subj='breadcrumb dashboardListingBreadcrumb first'"])
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='This is a search bar. As you type, the results lower in the page will automatically filter.'"])
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='This is a search bar. As you type, the results lower in the page will automatically filter.'"], actionPassValue = dashboardName)
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='This is a search bar. As you type, the results lower in the page will automatically filter.'"], actionPassValue = Keys.ENTER)
        AST.Access_Element(instance, DriverAction.HOVER, DriverSelectorType.XPATH, driverSelectorInputs=["//a[@class='euiLink euiLink--primary'", "text()='" + dashboardName + "'"])
        try:
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//a[@class='euiLink euiLink--primary'", "text()='" + dashboardName + "'"])
        except Exception as ex:
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//a[@class='euiLink euiLink--primary'", "contains(text(), '" + dashboardName + "')"])
        time.sleep(2)
      

    @staticmethod
    def Navigate_Space(instance, spaceName):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//div[@class = 'euiAvatar euiAvatar--s euiAvatar--space'"])
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//div[@class='euiText euiText--medium spcMenu__item'", "text()='" + spaceName + "'"])
        time.sleep(2)



    @staticmethod
    def Discover_Switch_Index(instance, index_name):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[contains(@data-test-subj, 'switch-link')"])
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Filter options'"])
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Filter options'"], actionPassValue = index_name)
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@aria-label='Filter options'"], actionPassValue = Keys.ENTER)
        time.sleep(1)

    @staticmethod
    def Discover_Allow_View_Hidden(instance):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["@data-test-subj='toggleFieldFilterButton'"])
        if (AST.Access_Element(instance, DriverAction.RETURN_ATTRIBUTE, DriverSelectorType.XPATH, driverSelectorInputs=["@data-test-subj='missingSwitch'"], actionPassValue="aria-checked")):
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["@data-test-subj='missingSwitch'"])
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["@data-test-subj='toggleFieldFilterButton'"])

    @staticmethod
    def Discover_Input_To_Search(instance, inputTxt, customKeys = [Keys.ENTER], clickInput = False):
        time.sleep(.5)
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the discover page'"])
        #print(inputTxt)
        time.sleep(.25)
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the discover page'"], actionPassValue = inputTxt)
        time.sleep(.5)
        if clickInput:
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the discover page'"])
        for key in customKeys:
            AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the discover page'"], actionPassValue = key)
            time.sleep(.25)
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs = ["//button[@data-test-subj='querySubmitButton'"])
        #Deselect by clicking background element
        #time.sleep(2)
        #AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//textarea[@aria-label='Start typing to search and filter the discover page'"], actionPassValue = [Keys.TAB, Keys.TAB])
        time.sleep(4)

    @staticmethod
    def Discover_Add_Filters(instance, filters):
        for filterItem in filters:
            AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='fieldFilterSearchInput'"])
            AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='fieldFilterSearchInput'"], actionPassValue = filterItem)
            AST.Access_Element(instance, DriverAction.HOVER, DriverSelectorType.XPATH, driverSelectorInputs=["//span[@data-test-subj='field-" + filterItem + "'"])
            AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@data-test-subj='fieldToggle-" + filterItem + "'"])
            #AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Add " + filterItem + " to table'"])

    @staticmethod
    def Discover_Save_Report(instance, reportName):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@data-test-subj='discoverSaveButton'"])
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='savedObjectTitle'"])
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='savedObjectTitle'"], actionPassValue = reportName)
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@data-test-subj='confirmSaveSavedObjectButton'"])


        #Follow this method up with this line:  AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@aria-label='Close this dialog'"])
    @staticmethod
    def Discover_Validate_Report_Exists(instance, reportName):
        AST.Access_Element(instance, DriverAction.CLICK, DriverSelectorType.XPATH, driverSelectorInputs=["//button[@data-test-subj='discoverOpenButton'"])
        AST.Access_Element(instance, DriverAction.CLEAR, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='savedObjectFinderSearchInput'"])
        AST.Access_Element(instance, DriverAction.SEND_KEYS, DriverSelectorType.XPATH, driverSelectorInputs=["//input[@data-test-subj='savedObjectFinderSearchInput'"], actionPassValue = reportName)
        #Verify test exists
        exists = AST.Access_Element(instance, DriverAction.VERIFY_EXISTS, DriverSelectorType.XPATH, driverSelectorInputs=["//span[@class='euiListGroupItem__label'", "text()='" + reportName + "'"])
        return exists
        
    @staticmethod
    def Discover_Return_Number_Hits(instance):
        time.sleep(.5)
        return AST.Access_Element(instance, DriverAction.GET_TEXT, DriverSelectorType.XPATH, driverSelectorInputs=["//strong[contains(@data-test-subj, 'unifiedHistogramQueryHits')"])



class AST(): #Automated Selenium Test
    @staticmethod
    def Return_Latest_File_In_Path(directory):
        files = glob.glob(os.path.join(directory, "*"))
        newest_file = max(files, key=os.path.getctime)
        return newest_file
        
    @staticmethod
    def Return_Download_Path():
        if platform.system() == 'Windows':
            download_path = os.path.join(os.path.expanduser("~"), 'Downloads')
        elif platform.system() == 'Linux':
            download_path = os.path.join(os.path.expanduser("~"), 'Downloads')
        else:
            print("Unsupported platform: " + platform.system())
            return None
    
        return download_path

    
    @staticmethod
    def Table_PrintTableValues(table):
        for i in range(len(table)):
                strRow = ""
                first = True
                for k in range(len(table[i])):
                    if (not first):
                        strRow += "  =  "
                    else:
                        first = False
                    strRow += table[i][k]
                    
                print(strRow)

    @staticmethod
    def Utility_ReturnXpathFromInput(driverSelectorInputs = [], xpathParentSelection = ""):
        selectorInput = ""
        first = False
        if (driverSelectorInputs[0][:2] != "//" and driverSelectorInputs[0][:3] != "(//"):
            selectorInput = "//*["
        first = True
        for i in driverSelectorInputs:
            if first == True:
                selectorInput = selectorInput + i
                first = False
            else:
                selectorInput = selectorInput + " and " + i
        selectorInput = selectorInput + "]" + xpathParentSelection
        return selectorInput
       
    @staticmethod   #Returns true is panel value is a nullable type
    def Utility_ReturnIsNullPanelValue(panelValue):
        if (panelValue == "-" or panelValue == "0" or panelValue == "No results found"):
            return True
        return False


    @staticmethod
    def Access_Element(instance, driverAction, driverSelectorType, actionPassValue="", driverSelectorInputs=[], xpathParentSelection = ""):
        driver = instance.driver
        wait = instance.wait
        actions = ActionChains(driver)

        #Set Wait
        match driverAction:
            case DriverAction.VERIFY_EXISTS_INSTANT:
                wait._timeout = .05
            case DriverAction.VERIFY_EXISTS:
                wait._timeout = 2
            case _:
                wait._timeout = 20

        #Setup Vars
        element = None
        selector = None
        selectorInput = ""
        #Get Selector Type
        match driverSelectorType:
            case DriverSelectorType.XPATH:
                selector = By.XPATH
                selectorInput = AST.Utility_ReturnXpathFromInput(driverSelectorInputs, xpathParentSelection)
                #print(selectorInput)

            case DriverSelectorType.LINK_TEXT:
                selector = By.LINK_TEXT
                selectorInput = driverSelectorInputs[0]
            case DriverSelectorType.CLASS:
                selector = By.CLASS_NAME
                selectorInput = driverSelectorInputs[0]
            case DriverSelectorType.SELECTOR:
                selector = By.CSS_SELECTOR
                selectorInput = driverSelectorInputs[0]
            case DriverSelectorType.NAME:
                selector = By.NAME
                selectorInput = driverSelectorInputs[0]


        #Get Element based on driver action
        numTries = 0
        match driverAction:
            case DriverAction.CLICK | DriverAction.SELECT | DriverAction.GET_TEXT: #If needs to be clicked
                while True:
                    try:
                        element = wait.until(expected_conditions.element_to_be_clickable((selector, selectorInput)))
                        if (element != None):
                            break
                    except:
                        numTries += 1
                        if (numTries == 4):
                            return None
                        print("Could not find element for click/select action") #element = wait.until(expected_conditions.element_to_be_clickable((selector, selectorInput)))
            case DriverAction.HIDE | DriverAction.UNHIDE: #This does some javascript evaluating so does not need to actually exist
                pass
            case _: #If just needs to exist
                try:
                    element = wait.until(expected_conditions.presence_of_element_located((selector, selectorInput)))
                except seleniumCommon.exceptions.WebDriverException:
                    if (driverAction == DriverAction.VERIFY_EXISTS or driverAction == DriverAction.VERIFY_EXISTS_INSTANT):
                         return False
                except:
                    element = wait.until(expected_conditions.presence_of_element_located((selector, selectorInput)))


        #Init action based on driver action type:
        match driverAction:
            case DriverAction.CLICK: #Click
                actions.scroll_to_element(element).perform()
                element.click()
            case DriverAction.SEND_KEYS: #Send Keys
                element.send_keys(actionPassValue)
            case DriverAction.CLEAR: #Clear
                #element.clear()  #This clear not working for some odd reason
                element.send_keys(Keys.CONTROL + 'a', Keys.DELETE)
                time.sleep(.1)
            case DriverAction.SCREENSHOT_RAW:
                if (type(actionPassValue) == type("string")):
                     actionPassValue = [actionPassValue]
                #element.screenshot(actionPassValue[0])
                #time.sleep(2)
                if (instance.extra != None):
                    #Set to start of "layer"
                    iCount = len(instance.extra)
                    layerToSet = math.floor(iCount / 5)
                    image = instance.driver.get_screenshot_as_base64()
                    imageEdit = Image.open(BytesIO(base64.b64decode(image)))

                    pixels = imageEdit.load()

                    #Loop through remaining actionpassvalues.

                    for i in range(len(actionPassValue) - 1):
                        if actionPassValue[i+1] == "RequireValidation":
                            for x in range(imageEdit.size[0] - 1):
                                #for every X
                                for height in range(5):
                                    pixels[x, height] = (255, 0, 0)
                                    pixels[x, imageEdit.size[1] - height - 1] = (255, 0, 0)
                            for y in range(imageEdit.size[1] - 1):
                                #for every Y
                                for width in range(5):
                                    pixels[width, y] = (255, 0, 0)
                                    pixels[imageEdit.size[0] - width - 1, y] = (255, 0, 0)

                    imgBuffer = BytesIO()
                    imageEdit.save(imgBuffer, format="PNG")
                    image = base64.b64encode(imgBuffer.getvalue())
                    image = image.decode('utf-8')

                    instance.extra.insert(layerToSet*5, pytest_html.extras.image(image))
                    return imgBuffer.getvalue()
            case DriverAction.SCREENSHOT_ELEMENT: #Screenshot
                #Hide dashboard bottom panel if it exists
                if (type(actionPassValue) == type("string")):
                     actionPassValue = [actionPassValue]
                KibanaShortcuts.Dashboard_Hide_Bottom_Bar(instance)

                actions.scroll_to_element(element).perform()
                #Small wait
                time.sleep(.2)
                element.screenshot(actionPassValue[0])
                if (instance.extra != None):
                    #Set to start of "layer"
                    iCount = len(instance.extra)
                    layerToSet = math.floor(iCount / 5)
                    image = element.screenshot_as_base64
                    imageEdit = Image.open(BytesIO(base64.b64decode(image)))

                    pixels = imageEdit.load()

                    #Loop through remaining actionpassvalues.

                    for i in range(len(actionPassValue) - 1):
                        if actionPassValue[i+1] == "RequireValidation":
                            for x in range(imageEdit.size[0] - 1):
                                #for every X
                                for height in range(5):
                                    pixels[x, height] = (255, 0, 0)
                                    pixels[x, imageEdit.size[1] - height - 1] = (255, 0, 0)
                            for y in range(imageEdit.size[1] - 1):
                                #for every Y
                                for width in range(5):
                                    pixels[width, y] = (255, 0, 0)
                                    pixels[imageEdit.size[0] - width - 1, y] = (255, 0, 0)

                    imgBuffer = BytesIO()
                    imageEdit.save(imgBuffer, format="PNG")
                    image = base64.b64encode(imgBuffer.getvalue())
                    image = image.decode('utf-8')

                    instance.extra.insert(layerToSet*5, pytest_html.extras.image(image))
                #Unhide dashboard bar if it exists
                KibanaShortcuts.Dashboard_Unhide_Bottom_Bar(instance)
            case DriverAction.SCROLL:
                driver.execute_script(f"scroll(0,0)") 
                time.sleep(.5)
                actions.scroll_to_element(element).perform
                time.sleep(.2)
                if actionPassValue == "":
                    actionPassValue = 0
                driver.execute_script(f"window.scrollBy(0, {actionPassValue});")
                time.sleep(1.5)
            case DriverAction.GET_TEXT: #Get Text
                return element.text
            case DriverAction.WAIT:
                pass
            case DriverAction.SELECT:
                select = Select(element)
                select.select_by_visible_text(actionPassValue)
            case DriverAction.VERIFY_EXISTS | DriverAction.VERIFY_EXISTS_INSTANT:
                return True #Would have errored out in element selection if it doesn't exist
            case DriverAction.HOVER:
                actions.scroll_to_element(element).perform()
                if actionPassValue == "":
                    actionPassValue = [0, 0]
                actions.move_to_element_with_offset(element, actionPassValue[0], actionPassValue[1]).perform()
            case DriverAction.RETURN_ATTRIBUTE:
                return element.get_attribute(actionPassValue)
            case DriverAction.HIDE:
                try:
                    driver.execute_script('document.evaluate("' + selectorInput + '", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.style.display = "none";')
                except:
                    pass
            case DriverAction.UNHIDE:
                try:
                    driver.execute_script('document.evaluate("' + selectorInput + '", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.style.display = "initial";')
                except:
                    pass

    

class TestInstance():
    
    def Initiate(self, extra):

        options = webdriver.ChromeOptions()
        options.set_capability("acceptInsecureCerts", True)
        #capabilities = DesiredCapabilities.CHROME.copy()
        #capabilities['acceptInsecureCerts'] = True
        #self.driver = driver = webdriver.Remote(command_executor='http://172.22.0.3:4444/grid/register', desired_capabilities=DesiredCapabilities.CHROME)#
        self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        #webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        #self.driver = webdriver.Chrome(ChromeDriverManager().install(), desired_capabilities=capabilities)
        self.driver.set_window_size(1920, 1080)
        #self.driver = webdriver.Chrome(desired_capabilities=desired_capabilities, executable_path="C:\\Selenium\\chromedriver.exe")
        self.wait = WebDriverWait(self.driver, 30)
        self.vars = {}
        self.extra = extra
        self.PanelData_IsInvalid = False
        self.PanelData_ListInvalid = []
        self.PanelData_IsRequireValidation = False
        self.PanelData_ListRequireValidation = []
        self.error = False
        

    def End_Test(self):
        self.driver.quit()   
        
        outputStr = ""

        if (self.PanelData_IsInvalid == True):
            outputStr += "\n\nThe test validated panel data but found empty or missing data. \n The following panels are missing data:\n"
            for panel in self.PanelData_ListInvalid:
                outputStr += "\n    " + panel
            self.error = True
        if (self.PanelData_IsRequireValidation == True):
            outputStr += "\n\nThe test validated panel data exists but requires manual validation \n The following panels require manual validation:\n"
            for panel in self.PanelData_ListRequireValidation:
                outputStr += "\n    " + panel
            self.error = True


        print(outputStr)
        if (self.error == True):
            raise Exception(outputStr)

